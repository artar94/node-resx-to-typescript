"use strict";
var addTypeScriptFile = require('add-typescript-file-to-project');
var fs = require('fs');
var path = require('path');
var mkpath = require('mkpath');
var search = require('recursive-search');
var xml2js = require('xml2js');
function execute(typeScriptResourcesNamespace, virtualResxFolder, virtualTypeScriptFolder, skipAddingFiles) {
    var files = null;
    var virtualProjectRoot = '\\..\\..\\..\\';
    if (virtualResxFolder === undefined || virtualResxFolder === '') {
        files = search.recursiveSearchSync(/.resx$/, __dirname + virtualProjectRoot);
    }
    else {
        virtualResxFolder = virtualResxFolder.replace(/\//g, '\\');
        var safeVirtualFolder = virtualResxFolder;
        if (safeVirtualFolder.charAt(0) === '\\') {
            safeVirtualFolder = safeVirtualFolder.substr(1);
        }
        if (safeVirtualFolder.charAt(safeVirtualFolder.length - 1) === '\\') {
            safeVirtualFolder = safeVirtualFolder.substr(0, safeVirtualFolder.length - 1);
        }
        files = search.recursiveSearchSync(/.resx$/, __dirname + virtualProjectRoot + safeVirtualFolder);
    }
    if (files !== undefined) {
        var filesAsString = JSON.stringify(files).replace('[', "").replace(']', "");
        var splittedFiles = filesAsString.split(',');
        for (var i = 0, length_1 = splittedFiles.length; i < length_1; i++) {
            var resxFilename = splittedFiles[i].trim().replace(/"/g, "").replace(/\\\\/g, "\\");
            convertResxToTypeScriptModel(resxFilename, typeScriptResourcesNamespace, virtualTypeScriptFolder, skipAddingFiles);
        }
    }
    function convertResxToTypeScriptModel(resxFilename, typeScriptResourcesNamespace, virtualTypeScriptFolder, skipAddingFiles) {
        fs.readFile(resxFilename, function (err, data) {
            var parser = new xml2js.Parser();
            parser.parseString(data, function (err, result) {
                if (result !== undefined) {
                    convertXmlToTypeScriptModelFile(result, resxFilename, typeScriptResourcesNamespace, virtualTypeScriptFolder, skipAddingFiles);
                }
            });
        });
    }
    function convertXmlToTypeScriptModelFile(xmlObject, resxFilename, typeScriptResourcesNamespace, virtualTypeScriptFolder, skipAddingFiles) {
        var projectRoot = getProjectRoot();
        var relativeResxFilename = path.relative(projectRoot, resxFilename).replace(/\\/g, "/");
        var className = resxFilename.substr(resxFilename.lastIndexOf("\\") + 1).replace('.resx', '').replace('.', '_');
        var resources = [];
        var content = '// TypeScript Resx model for: ' + relativeResxFilename + '\n' +
            '// Auto generated by resx-to-typescript (npm package)' + '\n' + '\n';
        if (typeScriptResourcesNamespace) {
            content = content + 'namespace ' + typeScriptResourcesNamespace + ' {\n';
        }
        content = content + '   export class ' + className + ' {\n';
        if (xmlObject.root.data !== undefined) {
            for (var i = 0, nrOfResourcesInFile = xmlObject.root.data.length; i < nrOfResourcesInFile; i++) {
                var name_1 = xmlObject.root.data[i].$.name;
                var value = xmlObject.root.data[i].value.toString().replace(/'/g, "\\'");
                resources.push({ name: name_1, value: value });
            }
        }
        for (var j = 0, nrOfResources = resources.length; j < nrOfResources; j++) {
            content = content + '       public ' + decapitalizeFirstLetter(resources[j].name) + ': string = `' + resources[j].value + '`;\n';
        }
        content = content + '   }\n';
        if (typeScriptResourcesNamespace) {
            content = content + '}\n';
        }
        // Write model if resources found
        if (resources.length > 0) {
            var tsFileName = resxFilename.replace('.resx', '.ts');
            if (virtualTypeScriptFolder === undefined || virtualTypeScriptFolder === '') {
                // Write the file aside of the the resx file.
                fs.writeFileSync(tsFileName, content, null);
                if (!skipAddingFiles)
                    addTypeScriptFile.execute(tsFileName);
            }
            else {
                // Write the file to the given output folder.
                var tsFileNameWithoutPath = tsFileName.substr(tsFileName.lastIndexOf('\\') + 1);
                var outputFileName = (projectRoot + virtualTypeScriptFolder + '\\' + tsFileNameWithoutPath).split('/').join('\\');
                var relativeOutputFileName = virtualTypeScriptFolder + '/' + tsFileNameWithoutPath;
                mkpath.sync(projectRoot + virtualTypeScriptFolder, '0700');
                fs.writeFileSync(outputFileName, content, null);
                if (!skipAddingFiles)
                    addTypeScriptFile.execute(relativeOutputFileName);
            }
        }
    }
    function getProjectRoot() {
        var splittedDirName = __dirname.split('\\');
        var spliitedRootDirName = [];
        for (var i = 0, length_2 = splittedDirName.length - 3; i < length_2; i++) {
            spliitedRootDirName.push(splittedDirName[i]);
        }
        return spliitedRootDirName.join('\\');
    }
    function decapitalizeFirstLetter(input) {
        return input.charAt(0).toLowerCase() + input.slice(1);
    }
}
exports.execute = execute;
//# sourceMappingURL=index.js.map